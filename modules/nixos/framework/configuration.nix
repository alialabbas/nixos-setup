{ config, pkgs, lib, modulesPath, ... }:

let
  cfg = config.modules.systemConfig;
in
{
  imports = [
    ../common.nix
    (modulesPath + "/installer/scan/not-detected.nix")
  ];
  config = {

    # TODO: this is generated by nixos-generate-config, figure out if there is a module that can handle this during build time
    boot.initrd.availableKernelModules = [
      "xhci_pci"
      "thunderbolt"
      "nvme"
      "uas"
      "sd_mod"
    ];
    boot.initrd.kernelModules = [ ];
    boot.kernelModules = [ "kvm-intel" ];
    boot.extraModulePackages = [ ];

    fileSystems."/" = {
      device = "/dev/disk/by-label/nixos";
      fsType = "ext4";
    };

    fileSystems."/boot" = {
      device = "/dev/disk/by-label/boot";
      fsType = "vfat";
    };

    swapDevices = [ ];

    hardware.enableRedistributableFirmware = lib.mkDefault true;

    hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    # end of generated hardwre

    # Be careful updating this.
    boot.kernelPackages = pkgs.linuxPackages_latest;

    # Use the systemd-boot EFI boot loader.
    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;

    nixpkgs.config.allowUnfree = true;

    users.users.${cfg.user}.extraGroups = [ "video" "networkmanager" "input" ];

    services.xserver = {
      enable = true;
      layout = "us";
      dpi = 220;

      desktopManager = {
        xterm.enable = false;
        wallpaper.mode = "fill";
      };

      displayManager = {
        defaultSession = "none+i3";
        lightdm.enable = true;
        gdm.enable = false;
      };

      windowManager = {
        i3.enable = true;
      };

      libinput.enable = lib.mkDefault true; # To get touchpad gestures working
      libinput.touchpad.horizontalScrolling = true;
    };

    services.openssh.enable = lib.mkDefault true;
    services.openssh.passwordAuthentication = true;
    services.openssh.permitRootLogin = "no";

    nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
    powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
    networking.networkmanager.enable = true;

    sound.enable = lib.mkDefault true;
    security.rtkit.enable = lib.mkDefault true;
    services.pipewire = {
      enable = lib.mkDefault true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
    };

    services.logind.lidSwitch = "lock";

    # TODO: looks like there should be a firmware update for fingerprint device to allow this to work for 13th intel gen frameworks
    services.fprintd = {
      enable = lib.mkDefault true;
      tod.enable = true;
      #tod.driver = pkgs.libfprint-2-tod1-vfs0090;
      tod.driver = pkgs.libfprint-2-tod1-goodix;
      # tod.driver = pkgs.libfprint-2-tod1-goodix-550a;
    };

    services.fwupd.enable = lib.mkDefault true;

    environment.sessionVariables = {
      MOZ_USE_XINPUT2 = "1";
    };

    # bluetooth
    hardware.bluetooth.enable = lib.mkDefault true;
  };
}
