{ config, lib, pkgs, ... }:

let
  rofi-network = pkgs.callPackage ./rofi-network.nix { };
in

{
  # TODO: these could probably be removed once i3 config is generated by nix and I can compute the path in the config
  home.packages = with pkgs; if config.programs.rofi.enable == true then [
    rofi-bluetooth
    rofi-network
  ] else [ ];

  programs.rofi = {
    enable = lib.mkDefault true;
    cycle = true;
    terminal = "${pkgs.kitty}/bin/kitty";
    theme =
      let
        inherit (config.lib.formats.rasi) mkLiteral;
      in
      {
        # onehalf dark
        "*" = {
          black = mkLiteral "#000000";
          red = mkLiteral "#eb6e67";
          green = mkLiteral "#95ee8f";
          yellow = mkLiteral "#f8c456";
          blue = mkLiteral "#6eaafb";
          purple = mkLiteral "#d886f3";
          cyan = mkLiteral "#6cdcf7";
          emphasis = mkLiteral "#50536b";
          text = mkLiteral "#dfdfdf";
          text-alt = mkLiteral "#b2b2b2";
          fg = mkLiteral "#abb2bf";
          bg = mkLiteral "#282c34";
          spacing = 0;
          background-color = mkLiteral "transparent";
          font = "Knack Nerd Font 14";
          text-color = mkLiteral "@text";
        };

        window = {
          transparency = "screenshot";
          fullscreen = false;
          background-color = mkLiteral "#282c34dd";
          border = 1;
          border-radius = 6;
          padding = 5;
        };

        mainbox = {
          border = 0;
          padding = 0;
        };

        inputbar = {
          margin = mkLiteral "0px 0px 20px 0px";
          children = map mkLiteral [ "prompt" "textbox-prompt-colon" "entry" "case-indicator" ];
        };

        prompt = {
          text-color = mkLiteral "@blue";
        };

        textbox-prompt-colon = {
          expand = false;
          str = ":";
          text-color = mkLiteral "@text-alt";
        };

        entry = {
          margin = mkLiteral "0px 10px";
        };

        listview = {
          spacing = mkLiteral "5px";
          dynamic = true;
          scrollbar = false;
        };

        element = {
          padding = mkLiteral "5px";
          text-color = mkLiteral "@text-alt";
          highlight = mkLiteral "bold #95ee8f";
          border-radius = mkLiteral "3px";
        };

        "element selected" = {
          background-color = mkLiteral "@emphasis";
          text-color = mkLiteral "@text";
        };

        "element urgent, element selected urgent" = {
          text-color = mkLiteral "@red";
        };

        "element active, element selected active" = {
          text-color = mkLiteral "@purple";
        };

        message = {
          padding = mkLiteral "5px";
          border-radius = mkLiteral "3px";
          backgrund-color = mkLiteral "@emphasis";
          border = mkLiteral "1px";
          border-color = mkLiteral "@cyan";
        };

        "button selected" = {
          padding = mkLiteral "5px";
          border-radius = mkLiteral "3px";
          background-color = mkLiteral "@emphasis";
        };
      };
  };
}
