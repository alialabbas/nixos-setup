" Basic Options
set autoread              " Reload files that have not been modified
set backspace=2           " Makes backspace behave like you'd expect
set colorcolumn=80        " Highlight 80 character limit
set hidden                " Allow buffers to be backgrounded without being saved
set laststatus=2          " Always show the status bar
set list                  " Show invisible characters
set listchars=tab:›\ ,eol:¬,trail:⋅ "Set the characters for the invisibles
set number
set ruler                 " Show the line number and column in the status bar
set t_Co=256              " Use 256 colors
set scrolloff=999         " Keep the cursor centered in the screen
set showmatch             " Highlight matching braces
set showmode              " Show the current mode on the open buffer
set splitbelow            " Splits show up below by default
set splitright            " Splits go to the right by default
set title                 " Set the title for gvim
syntax on                 " Enable filetype detection by syntax

" Backup settings
execute "set directory=~/.vim/swap"
execute "set backupdir=~/.vim/backup"
execute "set undodir=~/.vim/undo"
set backup
set undofile
set writebackup

" Search settings
set hlsearch   " Highlight results
set ignorecase " Ignore casing of searches
set incsearch  " Start showing results as you type
set smartcase  " Be smart about case sensitivity when searching

" Tab settings
set expandtab     " Expand tabs to the proper type and size
set tabstop=4     " Tabs width in spaces
set softtabstop=4 " Soft tab width in spaces
set shiftwidth=4  " Amount of spaces when shifting
set autoindent 	  " Autoindent new lines

" Tabs
nnoremap <C-t> :tabnew<CR>
nnoremap <C-c> :tabclose<CR>
nnoremap <C-[> :tabprevious<CR>
nnoremap <C-]> :tabnext<CR>

" Force write files that requires sudo access
cmap w!! %!sudo tee > /dev/null %

" Close all buffers except the current active one
nmap <leader>ca :%bd <bar> e# <bar> bd# <CR>


""" AutoCommands
" Clear whitespace at the end of lines automatically
autocmd BufWritePre * :%s/\s\+$//e

" make vim follow the terminal true color
" https://github.com/sonph/onehalf/tree/master/vim#true-colors
if exists('+termguicolors')
  " fix colorscheme with modern terminal
  let g:terminal_ansi_colors = [
        \'#383a42', '#e45649', '#50a14f', '#c18401', '#0184bc',
        \'#a626a4', '#0997b3', '#fafafa', '#a0a1a7', '#fafafa',
        \'#d4d4d4', '#e5e5e5', '#f0f0f0', '#f0f0f0', '#bfceff', '#f0f0f0' ]
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

colorscheme onehalfdark
"
" nicer Airline viewer
let g:airline_powerline_fonts = 1

let g:lsp_log_file = expand('~/vim-lsp.log') " TODO: hide this in a temp hidden dir

if executable('gopls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-remote=auto']},
        \ 'allowlist': ['go'],
        \ })
    autocmd BufWritePre *.go LspDocumentFormatSync
endif


function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)
    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction


augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END


" Omnisharp setings, TODO: move these to a proper plugin that I build along
" with setting compiler
let g:OmniSharp_server_use_net6 = 1
let g:OmniSharp_log_dir = '~/.local/share'
let g:OmniSharp_server_path = '/etc/profiles/per-user/alialabbas/bin/omnisharp' " Consider writing this with Nix to make the write subtitute instead of hardcoding it here
let g:OmniSharp_popup_options = {
    \ 'highlight': 'Normal',
    \ 'padding': [1],
    \ 'border': [1]
    \}

autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<CR>
autocmd FileType cs nnoremap gi :OmniSharpFindImplementations<CR>
autocmd FileType cs nnoremap gs :OmniSharpFindSymbol<CR>
autocmd FileType cs nnoremap gu :OmniSharpFindUsages<CR>
" TODO: consider making this a side window that open to the left or right and
" toggable
autocmd FileType cs nnoremap gm :OmniSharpFindMembers<CR>
autocmd FileType cs nnoremap gh :OmniSharpDocumentation<CR>
autocmd FileType cs nnoremap <S-k> :OmniSharpPreviewDefinition<CR>

" FZF mappings
nnoremap <silent> <leader>ff :Files<CR>
nnoremap <silent> <leader>fg :Rg<CR>
nnoremap <silent> <leader>fb :Buffers<CR>

" GitGutter
function! GitStatus()
  let [a,m,r] = GitGutterGetHunkSummary()
  return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline+=%{GitStatus()}

autocmd BufWritePost * GitGutter

" AsyncComplete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
